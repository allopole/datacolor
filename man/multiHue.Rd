% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multihue.R
\name{multiHue}
\alias{multiHue}
\alias{multiHue.diverge}
\alias{multiHue.constantL}
\title{Multi-hue color scales}
\usage{
multiHue(n = 11, colors = c("#081d58", "#086699", "#08BEC1", "#ffff66"))

multiHue.diverge(n = 11, lcolors = c("#0000d0", "#0479C8", "#08C8C8",
  "#ffff00"), rcolors = c("#ffff00", "#FF9696", "#CD4949", "#800000"),
  continuous = TRUE)

multiHue.constantL(n = 11, h = c(0, -45, -90, -135), c = 50, l = 60)
}
\arguments{
\item{n}{Integer. Number of levels in palette (number of bins).  Default: \code{n = 11}.}

\item{colors}{Character vector. (Only used with \code{multiHue}.) A vector of RGB colors specified as
hex color codes.}

\item{lcolors}{Character vector. (Only used with \code{multiHue.diverge}.) A vector of RGB colors
specified as hex color codes, defining the left side of a diverging palette.}

\item{rcolors}{Character vector. (Only used with \code{multiHue.diverge}.) A vector of RGB colors
specified as hex color codes, defining the right side of a diverging palette.}

\item{continuous}{Logical. (Default: TRUE) If continuous=TRUE (the default), A divergent palette
with no central discontinuity is created by joining \code{lcolors} and \code{rcolors}. The last color of
\code{lcolors} and the first color of \code{rcolors} must be identical. If continuous=FALSE \code{lcolors} and
\code{rcolors} will be abutted, creating a discontinuity last color of \code{lcolors} and the first color
of \code{rcolors} are not identical. A discontinuous palette will always contain an even number of
colors (\code{n} will be rounded down to the nearest even number).}

\item{h}{Numeric vector. (Only used with \code{multiHue.constantL}.) Hue angles for color stops.}

\item{c}{Numeric vector. (Only used with \code{multiHue.constantL}.) Chroma value(s) for color stops.}

\item{l}{Numeric. (Only used with \code{multiHue.constantL}.) Brightness value for color stops.}
}
\value{
character vector. A vector of RGB colors specified as hex color codes (#RRGGBB).
}
\description{
\code{multihue()} and \code{multihue.diverge()} address the problem of creating multi-hue (multi "stop")
color scales with perceptually linear brightness gradients and smooth hue gradients.
}
\details{
Pallettes produced by \code{multihue()}, \code{multihue.diverge()} and \code{multihue.constantL()} use bezier
interpolation in HCL space to produce smooth, transient-free color scales. After interpolation,
the scales are stretched to counter any non-linearity in brightness gradient introduced by the
presence of intermediate color "stops." The result is a perceptually linear brightness gradient,
even when printed in black and white.

The palette is specified by a vector of colors (or two vectors in the case of
\code{multihue.diverge}).  The first and last colors of each vector are endpoints of a color scale,
and optional intermediate color "stops" are treated as control points for a bezier curve
connecting the endpoints in HCL colorspace. These intermediate color stops are therefore not
actually present in the final color palette, but influence it. Colors may defined as hex codes or
with hue, chroma and lightness values, as in \code{\link[grDevices:hcl]{grDevices::hcl()}}.

These functions are built on top of Gregor Aisch's \href{https://gka.github.io/chroma.js/}{chroma.js}
javascript library. The functions access chroma.js javascript functions using the
\href{https://CRAN.R-project.org/package=V8}{V8} package.

Palette characteristics:
\itemize{
\item perceptually linear brightness gradients
\item smooth hue gradient throughout (no "corners")
\item multiple color stops allow increased color discrimination between levels
\item hue and chroma gradients not necessarily linear. Only brightness is adjusted for linearity.
}
}
\examples{
p <- multiHue()
colorbar(p)

## Maroon to yellow through salmon and pink
stops <- c('#800000', '#CD4949', '#FF9696','#FFFF00')
colorbar(stops) # display stops
palette <- multiHue(1024,colors=stops)
palette
colorbar(palette) # display palette

## Divergent (default)
p <- multiHue.diverge(1024)
colorbar(p)

## Divergent with discontinuity: left = Blue to Cyan, right = Yellow to Red
leftstops <- c("#3136AA","#3980B0","#00C5C0","#8EFDFD")
colorbar(leftstops)
rightstops <- c("#F3F300","#FF8CB4","#CD4C4C","#8F0000")
colorbar(rightstops)
palette <- multiHue.diverge(1024,leftstops,rightstops,continuous=F)
colorbar(palette)

## Constant Lightness (and chroma) color palette:
## 4 color stops define the bezier curve through HCL space; n=6 colors are output.
multiHue.constantL(n=6, h=c(-180, -105, -45, 0),c=50,l=60)
}
